// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using eSusInsurers.Domain.Entities.Configurations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable disable

namespace eSusInsurers.Domain.Entities;

public partial class esusinsurer_nonprodContext : DbContext
{
    public esusinsurer_nonprodContext(DbContextOptions<esusinsurer_nonprodContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppEvent> AppEvents { get; set; }

    public virtual DbSet<AppEventsAu> AppEventsAus { get; set; }

    public virtual DbSet<Claim> Claims { get; set; }

    public virtual DbSet<ClaimsAu> ClaimsAus { get; set; }

    public virtual DbSet<CountriesAu> CountriesAus { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Crop> Crops { get; set; }

    public virtual DbSet<CropCategoriesAu> CropCategoriesAus { get; set; }

    public virtual DbSet<CropCategory> CropCategories { get; set; }

    public virtual DbSet<CropInsurance> CropInsurances { get; set; }

    public virtual DbSet<CropInsuranceAu> CropInsuranceAus { get; set; }

    public virtual DbSet<CropInsurancePremium> CropInsurancePremiums { get; set; }

    public virtual DbSet<CropInsurancePremiumsAu> CropInsurancePremiumsAus { get; set; }

    public virtual DbSet<CropsAu> CropsAus { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<DistrictsAu> DistrictsAus { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<EmailTemplatesAu> EmailTemplatesAus { get; set; }

    public virtual DbSet<Farmer> Farmers { get; set; }

    public virtual DbSet<FarmerCrop> FarmerCrops { get; set; }

    public virtual DbSet<FarmerCropsAu> FarmerCropsAus { get; set; }

    public virtual DbSet<FarmersAu> FarmersAus { get; set; }

    public virtual DbSet<Feature> Features { get; set; }

    public virtual DbSet<FeaturesAu> FeaturesAus { get; set; }

    public virtual DbSet<FunctionalitiesAu> FunctionalitiesAus { get; set; }

    public virtual DbSet<Functionality> Functionalities { get; set; }

    public virtual DbSet<InsurancePoliciesAu> InsurancePoliciesAus { get; set; }

    public virtual DbSet<InsurancePolicy> InsurancePolicies { get; set; }

    public virtual DbSet<InsurancePremium> InsurancePremia { get; set; }

    public virtual DbSet<InsurancePremiumAu> InsurancePremiumAus { get; set; }

    public virtual DbSet<InsurancePremiumFrequency> InsurancePremiumFrequencies { get; set; }

    public virtual DbSet<InsurancePremiumFrequencyAu> InsurancePremiumFrequencyAus { get; set; }

    public virtual DbSet<InsuranceProvider> InsuranceProviders { get; set; }

    public virtual DbSet<InsuranceProviderDocument> InsuranceProviderDocuments { get; set; }

    public virtual DbSet<InsuranceProviderDocumentsAu> InsuranceProviderDocumentsAus { get; set; }

    public virtual DbSet<InsuranceProvidersAu> InsuranceProvidersAus { get; set; }

    public virtual DbSet<InsuranceRisk> InsuranceRisks { get; set; }

    public virtual DbSet<InsuranceRiskAu> InsuranceRiskAus { get; set; }

    public virtual DbSet<InsurerUser> InsurerUsers { get; set; }

    public virtual DbSet<InsurerUsersAu> InsurerUsersAus { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LocationsAu> LocationsAus { get; set; }

    public virtual DbSet<PaymentMode> PaymentModes { get; set; }

    public virtual DbSet<PaymentModesAu> PaymentModesAus { get; set; }

    public virtual DbSet<PremiumPayment> PremiumPayments { get; set; }

    public virtual DbSet<PremiumPaymentsAu> PremiumPaymentsAus { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<RegionsAu> RegionsAus { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleFeature> RoleFeatures { get; set; }

    public virtual DbSet<RoleFeaturesAu> RoleFeaturesAus { get; set; }

    public virtual DbSet<RolesAu> RolesAus { get; set; }

    public virtual DbSet<Season> Seasons { get; set; }

    public virtual DbSet<SeasonPhase> SeasonPhases { get; set; }

    public virtual DbSet<SeasonPhasesAu> SeasonPhasesAus { get; set; }

    public virtual DbSet<SeasonsAu> SeasonsAus { get; set; }

    public virtual DbSet<SubCountiesAu> SubCountiesAus { get; set; }

    public virtual DbSet<SubCounty> SubCounties { get; set; }

    public virtual DbSet<SubFunctionalitiesAu> SubFunctionalitiesAus { get; set; }

    public virtual DbSet<SubFunctionality> SubFunctionalities { get; set; }

    public virtual DbSet<TaxComponent> TaxComponents { get; set; }

    public virtual DbSet<TaxComponentsAu> TaxComponentsAus { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<UserTypesAu> UserTypesAus { get; set; }

    public virtual DbSet<UsersAu> UsersAus { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfiguration(new Configurations.AppEventConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.AppEventsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ClaimConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ClaimsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountriesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CountryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropCategoriesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropInsuranceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropInsuranceAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropInsurancePremiumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropInsurancePremiumsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CropsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DistrictConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.DistrictsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmailTemplatesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FarmerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FarmerCropConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FarmerCropsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FarmersAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FeatureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FeaturesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FunctionalitiesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.FunctionalityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePoliciesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePolicyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePremiumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePremiumAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePremiumFrequencyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurancePremiumFrequencyAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceProviderConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceProviderDocumentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceProviderDocumentsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceProvidersAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceRiskConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsuranceRiskAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurerUserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InsurerUsersAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LocationConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.LocationsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PaymentModeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PaymentModesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PremiumPaymentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PremiumPaymentsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RegionConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RegionsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RoleConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RoleFeatureConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RoleFeaturesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.RolesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SeasonConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SeasonPhaseConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SeasonPhasesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SeasonsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SubCountiesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SubCountyConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SubFunctionalitiesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.SubFunctionalityConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TaxComponentConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.TaxComponentsAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UserTypesAuConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.UsersAuConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
